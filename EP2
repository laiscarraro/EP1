#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct s {
    int tipo; //1=elemento 2=sublista

    union{
        int chave;
        struct s* sublista;
    };

    struct s* prox;

} NO;

char* nroUSP1();
char* nroUSP2();
char *grupo();

// ######### ESCREVA O NUMERO DO SEU GRUPO AQUI, CONFORME LINK NA ESPECIFICACAO DO EP
// ignore os warning to compilador, se houver
char* grupo() {
    return("14");
}

// ######### ESCREVA O NROUSP DO PRIMEIRO INTEGRANTE AQUI
// ignore os warning to compilador, se houver
char* nroUSP1() {
    return("0000000");
}

// ######### ESCREVA O NROUSP DO SEGUNDO INTEGRANTE AQUI (OU DEIXE COM ZERO)
// ignore os warning to compilador, se houver
char* nroUSP2() {
    return("10687638");
}

NO* tirarSublistas(NO* inicio, NO* *ult) {
    NO* subInicio = NULL;
    NO* subUltimo;
    NO* p = inicio;
    while(p && p->prox) {
        if(p->prox->tipo == 2) {
            if(!subInicio) {
                subInicio = p->prox;
                subUltimo = subInicio;
            } else {
                subUltimo->prox = p->prox;
                subUltimo = subUltimo->prox;
            }
            if(!p->prox->prox) {
                p->prox = NULL;
                break;
            }
            p->prox = p->prox->prox;
        }
        p = p->prox;
    }
    *ult = p;
    return subInicio;
}

// o EP consiste em implementar esta funcao
NO* listarChaves(NO* entrada) {
    NO* ult;
    NO* resp = tirarSublistas(entrada, &ult);
    while(resp) {
        ult->prox = resp->sublista;
        while(ult->prox) ult = ult->prox;
        resp = resp->prox;
    }
    resp = tirarSublistas(entrada, &ult);
    ult->prox = resp->sublista;
    return entrada;
}

NO* novoNo(bool no, int chave) {
    NO* novo = (NO*) malloc(sizeof(NO));
    if(no) {
        novo->tipo = 1;
        novo->chave = chave;
    } else {
        novo->tipo = 2;
        novo->sublista = NULL;
    }
    novo->prox = NULL;
    return novo;
}

void exibir(NO* p) {
    while(p) {
        if(p->tipo == 1) printf("%i\n", p->chave);
        else exibir(p->sublista);
        p = p->prox;
    }
}

//---------------------------------------------------------
// use main() para fazer chamadas de teste ao seu programa
//---------------------------------------------------------



int main() {

    NO* p = NULL;

    // aqui vc pode incluir codigo para inserir elementos
    // de teste na sua lista apontada por p

    p = (NO*) malloc(sizeof(NO));
    p->tipo = 1;
    p->chave = 1;

    NO* inicio = p;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 2;
    NO* sub1 = p;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 1;
    p->chave = 2;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 2;
    NO* sub2 = p;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 1;
    p->chave = 3;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 2;
    NO* sub3 = p;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 1;
    p->chave = 4;

    p->prox = (NO*) malloc(sizeof(NO));
    p = p->prox;
    p->tipo = 2;
    NO* sub4 = p;

    sub1->sublista = (NO*) malloc(sizeof(NO));
    sub1 = sub1->sublista;
    sub1->tipo = 1;
    sub1->chave = 5;

    sub1->prox = (NO*) malloc(sizeof(NO));
    sub1 = sub1->prox;
    sub1->tipo = 2;
    NO* sub5 = sub1;

    sub1->prox = (NO*) malloc(sizeof(NO));
    sub1 = sub1->prox;
    sub1->tipo = 1;
    sub1->chave = 6;

    sub2->sublista = (NO*) malloc(sizeof(NO));
    sub2 = sub2->sublista;
    sub2->tipo = 1;
    sub2->chave = 7;

    sub3->sublista = (NO*) malloc(sizeof(NO));
    sub3 = sub3->sublista;
    sub3->tipo = 1;
    sub3->chave = 8;

    sub3->prox = (NO*) malloc(sizeof(NO));
    sub3 = sub3->prox;
    sub3->tipo = 1;
    sub3->chave = 9;

    sub5->sublista = (NO*) malloc(sizeof(NO));
    sub5 = sub5->sublista;
    sub5->tipo = 1;
    sub5->chave = 10;

    // o EP sera testado com chamadas deste tipo
    exibir(listarChaves(inicio));

    // e aqui vc deveria percorrer a lista teste para ver se ficou correta etc.

}

// por favor nao inclua nenhum código abaixo da função main()
